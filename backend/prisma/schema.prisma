generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Folder {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  files     File[]
}

model Admin {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id          String   @id @default(uuid())
  name        String
  description String?
  content     Bytes
  mimeType    String
  uploadDate  DateTime @default(now())
  fileType    String
  fileSize    Int
  fromWebsite Boolean
  folder      Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId    String

  @@index([folderId])
}

// Singleton contact
model Contact {
  createdAt    DateTime @default(now())
  name         String
  address      String?
  phone        String?
  mobile       String?
  email        String?
  maintenence  String?
  data_id      String?
  ic           String?
  dic          String?
  bank_account String?
  last_updated DateTime @updatedAt
  officeHours OfficeHours[]
  employees   Employee[]

  @@unique([createdAt], name: "singleton")
  @@map("contact")
}

model OfficeHours {
  id        Int      @id @default(autoincrement())
  days      String
  time      String
  contact   Contact  @relation(fields: [contactId], references: [createdAt], onDelete: Cascade)
  contactId DateTime

  @@map("office_hours")
}

model Employee {
  id        Int      @id @default(autoincrement())
  name      String
  position  String?
  phone     String?
  email     String?
  contact   Contact  @relation(fields: [contactId], references: [createdAt], onDelete: Cascade)
  contactId DateTime

  @@map("employees")
}